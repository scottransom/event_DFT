#ifndef __eventdft_cmd__
#define __eventdft_cmd__
/*****
  command line parser interface -- generated by clig 
  (http://wsd.iitb.fhg.de/~geg/clighome/)

  The command line parser `clig':
  (C) 1995-2004 Harald Kirsch (clig@geggus.net)
*****/

typedef struct s_Cmdline {
  /***** -days: Events are in days since MJD0 (default is seconds) */
  char daysP;
  /***** -mjds: Events are in MJDs */
  char mjdsP;
  /***** -double: Events are in binary double precision (default is ASCII) */
  char doubleP;
  /***** -iout: Send the list of freqs and incoherently summed powers to stdout */
  char ioutP;
  /***** -cout: Send the list of freqs and coherently summed powers to stdout */
  char coutP;
  /***** -nocoherent: Do not sum powers coherently in the search */
  char nocoherentP;
  /***** -noincoherent: Do not sum powers incoherently in the search */
  char noincoherentP;
  /***** -nostatus: Do not print percent complete status to STDOUT */
  char nostatusP;
  /***** -fmin: Lowest freq to search (hz) */
  char fminP;
  double fmin;
  int fminC;
  /***** -fmax: Highest freq to search (hz) */
  char fmaxP;
  double fmax;
  int fmaxC;
  /***** -fdotbyf: Frequency Derivative / Freq to apply to the events before DFTing */
  char fdotbyfP;
  double fdotbyf;
  int fdotbyfC;
  /***** -ifs: Approx number of independent freqs in search */
  char ifsP;
  double ifs;
  int ifsC;
  /***** -mjd0: The fiducial time (in MJD) to use as T0 (default sets T0 to the first event) */
  char MJD0P;
  double MJD0;
  int MJD0C;
  /***** -time: The total duration in sec to accept events from the input file (default uses all events) */
  char TP;
  double T;
  int TC;
  /***** -start: The fraction of the way through T (beginning at MJD0) to start looking at events (default is 0.0) */
  char startTP;
  double startT;
  int startTC;
  /***** -end: The fraction of the way through T (beginning at MJD0) to stop looking at events (default is 1.0) */
  char endTP;
  double endT;
  int endTC;
  /***** -offset: A time offset to add to the 1st event in the same units as the events */
  char offsetP;
  double offset;
  int offsetC;
  /***** -numsum: Maximum number of harmonics to sum */
  char numsumP;
  int numsum;
  int numsumC;
  /***** -osamp: Factor to oversample normal (1/T) Fourier spacing */
  char osampP;
  int osamp;
  int osampC;
  /***** -ncands: Number of candidates to return */
  char ncandsP;
  int ncands;
  int ncandsC;
  /***** uninterpreted command line parameters */
  int argc;
  /*@null*/char **argv;
  /***** the whole command line concatenated */
  char *all_args;
} Cmdline;


extern char *Program;
extern void usage(void);
extern /*@shared*/Cmdline *parseCmdline(int argc, char **argv);

extern void showOptionValues(void);

#endif

